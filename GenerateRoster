// ---- Constants for easy edit ----
const SHIFT1_START = 700;   // 7am
const SHIFT1_END = 1700;    // 5pm (exclusive)
const SHIFT2_START = 1700;  // 5pm
const SHIFT2_END = 0;       // Midnight

// --- Helper: Returns "Shift 1" or "Shift 2" based on timing ---
function getShiftType(startTime, endTime) {
  var start = parseInt(startTime, 10);
  var end = parseInt(endTime, 10);

  // Shift 1: Any overlap with 7am-5pm
  if (
    (start >= SHIFT1_START && start < SHIFT1_END) ||
    (end > SHIFT1_START && end <= SHIFT1_END)
  ) {
    return "Shift 1";
  }
  // Shift 2: Any overlap with 5pm-12am
  if (
    (start >= SHIFT2_START && start <= 2359) ||
    (end > SHIFT2_START && end <= 2359) ||
    end === SHIFT2_END // end at 0000 is shift 2
  ) {
    return "Shift 2";
  }
  return ""; // Not in range
}

// --- Helper: Custom date formatting ---
function formatCustomDate(date) {
  var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  return date.getDate() + " " + months[date.getMonth()] + " " + date.getFullYear();
}

// --- Helper: Always returns a 4-digit string, with leading 0s ---
function toSheetTime(str) {
  return "'" + str.toString().padStart(4, '0');
}

// --- Helper: Parse "700 to 1600" etc to start/end ---
function parseShiftTime(str) {
  var m = (str||"").match(/(\d{3,4})\s*to\s*(\d{3,4})/);
  if (!m) return {start: '', end: ''};
  return {start: m[1].padStart(4,'0'), end: m[2].padStart(4,'0')};
}

// --- Helper: "7am-5pm" etc to "0700 to 1700" ---
function normaliseShiftTiming(str) {
  var m = (str||"").match(/(\d{1,2})(?::?(\d{2}))?\s*(am|pm)?\s*[\-to]{1,3}\s*(\d{1,2})(?::?(\d{2}))?\s*(am|pm)?/i);
  if (!m) return str;
  var sHour = parseInt(m[1]);
  var sMin = m[2] ? parseInt(m[2]) : 0;
  var sAMPM = (m[3]||"").toLowerCase();
  var eHour = parseInt(m[4]);
  var eMin = m[5] ? parseInt(m[5]) : 0;
  var eAMPM = (m[6]||"").toLowerCase();
  if (sAMPM==="pm" && sHour < 12) sHour += 12;
  if (sAMPM==="am" && sHour==12) sHour = 0;
  if (eAMPM==="pm" && eHour < 12) eHour += 12;
  if (eAMPM==="am" && eHour==12) eHour = 0;
  var start = (sHour*100+sMin).toString().padStart(4,'0');
  var end   = (eHour*100+eMin).toString().padStart(4,'0');
  return start + " to " + end;
}

// --- Helper: Find a keyword in column B, return row number (1-based) ---
function findRowByColB(sheet, keyword) {
  var values = sheet.getRange("B1:B" + sheet.getLastRow()).getValues().flat();
  for (var i = 0; i < values.length; i++) {
    if ((values[i] || "").toString().trim().toLowerCase() === keyword.toLowerCase()) return i + 1;
  }
  return -1;
}

// --- Helper: Get list below row in col B (until blank) ---
function getListBelow(sheet, col, startRow) {
  var out = [];
  var row = startRow;
  while (true) {
    var v = (sheet.getRange(row, col).getValue() || "").toString().trim();
    if (!v) break;
    out.push(v);
    row++;
  }
  return out;
}

// --- Helper: Get 2-col shift map: code in B, time in C, below startRow (until blank) ---
function getShiftMap(sheet, startRow) {
  var out = {};
  var row = startRow;
  while (true) {
    var code = (sheet.getRange(row, 2).getValue() || "").toString().trim().toUpperCase();
    var time = (sheet.getRange(row, 3).getValue() || "").toString().trim();
    if (!code || !time || code.match(/total/i)) break;

    if (code === "FD" || code === "ND" || code === "AM/ND") {
      out[code] = { code: code, timing: time };
    }
    row++;
  }
  return out;
}

// --- Helper: Get Nurse Lead shift map (code B, time C) ---
function getNLShiftMap(sheet, startRow) {
  var out = {};
  var row = startRow;
  while (true) {
    var codeRaw = (sheet.getRange(row, 2).getValue() || "").toString().trim();
    var code = codeRaw.toUpperCase();
    var time = (sheet.getRange(row, 3).getValue() || "").toString().trim();
    if (!code || !time) break;
    var timeStr = normaliseShiftTiming(time.replace(/-/, " to "));
    var shiftName = code.replace(/SHIFT (\d+)/i, "Shift $1");
    var timeObj = parseShiftTime(timeStr);
    out[code] = {
      code: code,
      timing: timeStr,
      shift: shiftName,
      start: timeObj.start,
      end: timeObj.end,
      num: parseInt(timeObj.start||"0",10)
    };
    row++;
  }
  return out;
}

// --- Helper: Read FT Leave and return a leaveMap lookup object ---
function getLeaveMapFromSheet() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var leaveSheet = ss.getSheetByName("FT Leave");
  var leaveData = leaveSheet ? leaveSheet.getDataRange().getValues() : [];
  var leaveMap = {};
  for (var i = 1; i < leaveData.length; i++) {
  var emp = (leaveData[i][0] || "").toString().trim();
  var leaveType = (leaveData[i][1] || "").toString().trim();
  var startRaw = leaveData[i][2];
  var endRaw = leaveData[i][3];
  if (!emp || !leaveType || !startRaw) continue;
  var empName = emp.toLowerCase(); // Now always safe
  var start = startRaw instanceof Date ? new Date(startRaw) : new Date(startRaw);
  var end = endRaw ? (endRaw instanceof Date ? new Date(endRaw) : new Date(endRaw)) : start;
  var status = "";
  var leaveTypeLc = leaveType.toLowerCase();
  if (leaveTypeLc.indexOf("annual") !== -1 || leaveTypeLc === "leave") status = "Leave";
  else if (leaveTypeLc.indexOf("mc") !== -1) status = "MC";
  else if (leaveTypeLc.indexOf("ml") !== -1) status = "ML";
  else if (leaveTypeLc.indexOf("hl") !== -1) status = "HL";

  if (!status) continue;
  for (var d = new Date(start.getFullYear(), start.getMonth(), start.getDate()); d <= end; d.setDate(d.getDate() + 1)) {
    var dateStr = formatCustomDate(d);
    leaveMap[empName + "|" + dateStr] = status;
  }
}


  return leaveMap;
}

function confirmAndPopulate() {
  var ui = SpreadsheetApp.getUi();
  var response = ui.alert(
    'Confirmation',
    'Are you sure you want to generate FT Availability list?',
    ui.ButtonSet.YES_NO
  );
  if (response == ui.Button.YES) {
    populateResults();
    ui.alert('FT Availability generation completed!');
  } else {
    ui.alert('Operation cancelled.');
  }
}


// --- MAIN FUNCTION: Populate FT Availability ---
function populateResults() {
  // 1. Sync leave from calendar into FT Leave
  pullCalendarWithNurseRoster();
 
  var ss = SpreadsheetApp.openById("1OaxGPjWVojD6H4RtkK8Q3ZtPS3RLgowWnyC7qRtd1NA");
  var roster = ss.getSheetByName("FT Roster");
  var results = ss.getSheetByName("FT Availability");

  // 2. Build leave map from updated FT Leave
  var leaveMap = getLeaveMapFromSheet();
  Logger.log(JSON.stringify(leaveMap, null, 2));


  // 3. New or continue from existing
  var mode = (roster.getRange("C2").getValue() || "").toString().trim().toLowerCase();
  var clearResults = (mode !== "continue from existing");
  var existingPairs = {};
  if (!clearResults) {
    var data = results.getDataRange().getValues();
    for (var i = 1; i < data.length; i++) {
      var row = data[i];  // <-- row is defined here, inside the loop!
      var rawDate = row[1];
      var date = "";
      if (rawDate instanceof Date) {
        date = formatCustomDate(rawDate);
      } else {
        var tryDate = new Date(rawDate);
        if (!isNaN(tryDate)) {
          date = formatCustomDate(tryDate);
        } else {
          date = (rawDate || '').toString().trim();
        }
      }
      var name = (row[8] || '').toString().trim().toLowerCase();  // Column I
      if (!date || !name) continue;
      existingPairs[(date + "|" + name).toLowerCase()] = true;
    }
  }
  function rowExists(date, name) {
    return !!existingPairs[
      (date || '').toString().trim().toLowerCase() + "|" +
      (name || '').toString().trim().toLowerCase()
    ];
  }
  
  // 4. Date period
  var startDate = new Date(roster.getRange("D2").getValue());
  var endDate = new Date(roster.getRange("E2").getValue());

  var maxCol = roster.getLastColumn();
  var maxRow = roster.getLastRow();

  // (1) Clear the sheet if generating new
  if (clearResults) {
    var lastRow = results.getLastRow();
    if (lastRow > 1) {
      results.getRange(2, 1, lastRow - 1, results.getLastColumn()).clearContent();
    }
  }

  var daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  var daysOfWeekNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

  // --- Find all General Nurse and Nurse Lead sections dynamically ---
  var gnRow = findRowByColB(roster, "General Nurse");
  var gnNameHeaderRow = gnRow + 1;
  var gnNameStartRow = gnRow + 2;
  var gn_names = getListBelow(roster, 2, gnNameStartRow);
  var gn_ojt = gn_names.map(function(_, idx) {
    return (roster.getRange(gnNameStartRow + idx, 3).getValue() || "");
  });
  var gn_numStaff = gn_names.length;

  var gnShiftRow = findRowByColB(roster, "General Nurse Shifts");
  var gn_shiftMap = getShiftMap(roster, gnShiftRow + 1);

  var nlRow = findRowByColB(roster, "Nurse Lead");
  var nlNameHeaderRow = nlRow + 1;
  var nlNameStartRow = nlRow + 2;
  var nl_names = getListBelow(roster, 2, nlNameStartRow);
  var nl_ojt = nl_names.map(function(_, idx) {
    return (roster.getRange(nlNameStartRow + idx, 3).getValue() || "");
  });
  var nl_maxNurseLead = nl_names.length;

  var nlShiftRow = findRowByColB(roster, "Nurse Lead Shifts");
  var nl_shiftMap = getNLShiftMap(roster, nlShiftRow + 1);

  // --- Find all date column blocks for general nurse ---
  var headerRow = gnRow + 1; // row with "name", "OJT", dates...
  var headerVals = roster.getRange(headerRow, 1, 1, maxCol).getValues()[0];
  var dateColIndexes = [];
  var startCol = 4; // D
  while (startCol <= maxCol) {
    var thisBlock = [];
    for (var c = startCol-1; c < maxCol; c++) {
      if (!headerVals[c]) break;
      thisBlock.push(c+1);
    }
    if (thisBlock.length === 0) break;
    dateColIndexes.push(thisBlock);
    startCol = thisBlock[thisBlock.length-1] + 1;
    while (startCol <= maxCol && !headerVals[startCol-1]) startCol++;
  }

  // --- Loop by date ---
  for (var dt = new Date(startDate); dt <= endDate; dt.setDate(dt.getDate() + 1)) {
    var thisDate = new Date(dt);
    var thisDayIdx = thisDate.getDay();
    var thisDayShort = daysOfWeek[thisDayIdx];
    var thisDayFull = daysOfWeekNames[thisDayIdx];

    var dailyRows = [];

    // --- General Nurse shifts for this date ---
    dateColIndexes.forEach(function(block) {
      var blockDates = block.map(function(colIdx) {
        return roster.getRange(headerRow, colIdx).getValue();
      });
      for (var j = 0; j < block.length; j++) {
        var dVal = blockDates[j];
        if (!dVal) continue;
        var dCheck = new Date(dVal);
        if (dCheck.getFullYear() !== thisDate.getFullYear() ||
            dCheck.getMonth() !== thisDate.getMonth() ||
            dCheck.getDate() !== thisDate.getDate()) continue;
        var shifts = roster.getRange(headerRow + 1, block[j], gn_numStaff, 1).getValues();
        for (var i = 0; i < gn_numStaff; i++) {
          var shiftCodeRaw = (shifts[i][0] || "").toString().trim().toUpperCase();
          if (!shiftCodeRaw || shiftCodeRaw === "OFF") continue;

          // FD = Shift 1, ND = Shift 2, AM/ND = both
          if (shiftCodeRaw === "FD" && gn_shiftMap["FD"]) {
            // FD: Use timing as per sheet
            var map = gn_shiftMap["FD"];
            var timeStr = normaliseShiftTiming(map.timing);
            var timeObj = parseShiftTime(timeStr);
            var shiftType = getShiftType(timeObj.start, timeObj.end) || "Shift 1"; // Usually always shift 1
            var thisRow = [
              "FT", formatCustomDate(thisDate), thisDayShort,
              timeStr, shiftType, toSheetTime(timeObj.start), toSheetTime(timeObj.end), "",
              gn_names[i],
              leaveMap[(gn_names[i] || "").toString().trim().toLowerCase() + "|" + formatCustomDate(thisDate)] || "",
              "Yes", gn_ojt[i], "", parseInt(timeObj.start,10)
            ];
            if (clearResults || !rowExists(thisRow[1], thisRow[8])) dailyRows.push(thisRow);
          }
          else if (shiftCodeRaw === "ND" && gn_shiftMap["ND"]) {
            // ND: Use timing as per sheet
            var map = gn_shiftMap["ND"];
            var timeStr = normaliseShiftTiming(map.timing);
            var timeObj = parseShiftTime(timeStr);
            var shiftType = getShiftType(timeObj.start, timeObj.end) || "Shift 2";
            var thisRow = [
              "FT", formatCustomDate(thisDate), thisDayShort,
              timeStr, shiftType, toSheetTime(timeObj.start), toSheetTime(timeObj.end), "",
              gn_names[i],
              leaveMap[(gn_names[i] || "").toString().trim().toLowerCase() + "|" + formatCustomDate(thisDate)] || "",
              "Yes", gn_ojt[i], "", parseInt(timeObj.start,10)
            ];
            if (clearResults || !rowExists(thisRow[1], thisRow[8])) dailyRows.push(thisRow);
          }
          else if (shiftCodeRaw === "AM/ND" && gn_shiftMap["AM/ND"]) {
            // AM/ND: Split timing by comma, assign AM to Shift 1, ND to Shift 2
            var map = gn_shiftMap["AM/ND"];
            var parts = map.timing.split(',');
            if (parts.length === 2) {
              // AM part (Shift 1)
              var amTimeStr = normaliseShiftTiming(parts[0].trim());
              var amObj = parseShiftTime(amTimeStr);
              var amShiftType = getShiftType(amObj.start, amObj.end) || "Shift 1";
              var thisRow1 = [
                "FT", formatCustomDate(thisDate), thisDayShort,
                amTimeStr, amShiftType, toSheetTime(amObj.start), toSheetTime(amObj.end), "",
                gn_names[i],
                leaveMap[(gn_names[i] || "").toString().trim().toLowerCase() + "|" + formatCustomDate(thisDate)] || "",
                "Yes", gn_ojt[i], "", parseInt(amObj.start,10)
              ];
              if (clearResults || !rowExists(thisRow1[1], thisRow1[8])) dailyRows.push(thisRow1);

              // ND part (Shift 2)
              var ndTimeStr = normaliseShiftTiming(parts[1].trim());
              var ndObj = parseShiftTime(ndTimeStr);
              var ndShiftType = getShiftType(ndObj.start, ndObj.end) || "Shift 2";
              var thisRow2 = [
                "FT", formatCustomDate(thisDate), thisDayShort,
                ndTimeStr, ndShiftType, toSheetTime(ndObj.start), toSheetTime(ndObj.end), "",
                gn_names[i],
                leaveMap[(gn_names[i] || "").toString().trim().toLowerCase() + "|" + formatCustomDate(thisDate)] || "",
                "Yes", gn_ojt[i], "", parseInt(ndObj.start,10)
              ];
              if (clearResults || !rowExists(thisRow2[1], thisRow2[8])) dailyRows.push(thisRow2);
            }
          }       
        }
      }
    });

    // --- Nurse Lead shifts for this date ---
    var nl_headerRow = nlRow + 1;
    var nl_weekdayHeaders = roster.getRange(nl_headerRow, 4, 1, 7).getValues()[0];
    var nl_colIdx = nl_weekdayHeaders.map(x => (x || "").toString().trim().toLowerCase()).indexOf(thisDayFull.toLowerCase());
    if (nl_colIdx !== -1) {
      for (var i = 0; i < nl_names.length; i++) {
        var name = (nl_names[i] || "").toString().trim();
        if (!name) continue;
        var ojtValue = nl_ojt[i] || "";
        var shiftCell = (roster.getRange(nlNameStartRow + i, 4 + nl_colIdx).getValue() || "").toString().trim();
        if (!shiftCell || shiftCell.toUpperCase() === "OFF") continue;
        var match = shiftCell.match(/^([^(]+?)(?:\(([^)]+)\))?$/);
        if (!match) continue; 
        var shiftCode = (match[1] || "").trim().toUpperCase();
        var remarks = match[2] ? match[2].trim() : "";
        var upperShiftCell = shiftCell.toUpperCase();
        var upperRemarks = (remarks || "").toUpperCase();
        var extraRemark = [];
        if (upperShiftCell.includes("IC") || upperRemarks.includes("IC")) extraRemark.push("On duty (Backend). Can't go to case");
        if (upperShiftCell.includes("SOS") || upperRemarks.includes("SOS")) extraRemark.push("half load, 3 case");
        if (upperShiftCell.includes("GN") || upperRemarks.includes("GN")) extraRemark.push("Full case");
        if (extraRemark.length > 0) {
          if (remarks) remarks += ": " + extraRemark.join("; ");
          else remarks = extraRemark.join("; ");
        }
        if (!(shiftCode in nl_shiftMap)) continue;
        var shiftInfo = nl_shiftMap[shiftCode];
        var thisRow = [
          "FT", formatCustomDate(thisDate), thisDayShort,
          shiftInfo.timing, shiftInfo.shift, toSheetTime(shiftInfo.start), toSheetTime(shiftInfo.end), "",
          name,
          leaveMap[(name || "").toString().trim().toLowerCase() + "|" + formatCustomDate(thisDate)] || "",

          "Yes", ojtValue, remarks, parseInt(shiftInfo.start,10)
        ];
        if (clearResults || !rowExists(thisRow[1], thisRow[8])) {
          dailyRows.push(thisRow);
        }
      }
    }

    // Sort for this day by start time
    dailyRows.sort(function(a, b) {
      return a[a.length-1] - b[b.length-1];
    });

    // Remove helper column before writing
    for (var k = 0; k < dailyRows.length; k++) {
      dailyRows[k].pop();
      results.appendRow(dailyRows[k]);
    }
  }
}


